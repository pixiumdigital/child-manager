{"version":3,"sources":["Process.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ProcessComponent","process","useState","logs","setLogs","logsError","setLogsError","useEffect","setInterval","id","processId","axios","get","then","res","data","console","log","catch","e","processData","className","processName","processStart","length","map","index","App","status","setStatus","processes","setProcesses","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAGaA,EAAmB,SAACC,GAC7B,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAgBAC,qBAAU,WACNC,aAAY,WAfA,IAACC,IAgBDR,EAAQA,QAAQS,UAf5BC,IAAMC,IAAI,8BAAgCH,GAAII,MAAK,SAACC,GAC5CA,EAAIC,KAAKZ,OACTa,QAAQC,IAAIH,EAAIC,MAChBX,EAAQU,EAAIC,KAAKZ,OAEjBW,EAAIC,KAAKV,WACTC,EAAaQ,EAAIC,KAAKV,cAE3Ba,OAAM,SAAAC,SAQN,OACJ,IACH,IAAMC,EAAW,OAAGnB,QAAH,IAAGA,OAAH,EAAGA,EAASA,QAC7B,OACI,sBAAKoB,UAAU,OAAf,UACI,6BAAKD,EAAYE,cACjB,0CAAaF,EAAYG,gBACzB,sBAAKF,UAAU,YAAf,UACKlB,EAAKqB,OAAS,GACX,qBAAKH,UAAU,WAAf,SACKlB,EAAKsB,KAAI,SAACN,EAAWO,GAClB,OAAO,4BAAyBP,GAAzB,cAAeO,SAIjCrB,EAAUmB,OAAS,GAChB,qBAAKH,UAAU,WAAf,SACKhB,EAAUoB,KAAI,SAACN,EAAWO,GACvB,OAAO,4BAAyBP,GAAzB,cAAeO,gBCHnCC,MAlCf,WACI,MAA4BzB,oBAAS,GAArC,mBAAO0B,EAAP,KAAeC,EAAf,KACA,EAAkC3B,mBAAS,IAA3C,mBAAO4B,EAAP,KAAkBC,EAAlB,KAiBA,OAhBAxB,qBAAU,WACNI,IAAMC,IAAI,gCAAgCC,MAAK,SAACC,GACxCA,EAAIC,KAAKa,SACTC,EAAUf,EAAIC,KAAKa,QACnBjB,IAAMC,IAAI,mCAAmCC,MAAK,SAACC,GAC3CA,EAAIC,KAAKe,YACTd,QAAQC,IAAIH,EAAIC,KAAKe,WACrBC,EAAajB,EAAIC,KAAKe,eAE3BZ,OAAM,SAAAC,aAKlB,IAGC,sBAAKE,UAAU,MAAf,UACI,yBAAQA,UAAU,aAAlB,UACI,+CACA,yCACcO,EAAU,sBAAMP,UAAU,SAAhB,oBAAyC,sBAAMA,UAAU,UAAhB,2BAGrE,qBAAKA,UAAU,WAAf,SAA2BS,EAAUL,KAAI,SAACxB,EAASyB,GAC/C,OAAO,cAAC,EAAD,CAA8BzB,QAASA,GAAhByB,YCnB/BM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5f267178.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios'\n\nexport const ProcessComponent = (process: any) => {\n    const [logs, setLogs] = useState([])\n    const [logsError, setLogsError] = useState([])\n\n    const getData = (id: string) => {\n        axios.get(\"http://localhost:7000/logs/\" + id).then((res) => {\n            if (res.data.logs) {\n                console.log(res.data)\n                setLogs(res.data.logs)\n            }\n            if (res.data.logsError) {\n                setLogsError(res.data.logsError)\n            }\n        }).catch(e => {\n\n        })\n    }\n\n    useEffect(() => {\n        setInterval(() => {\n            getData(process.process.processId)\n        }, 5000)\n    }, [])\n    const processData = process?.process\n    return (\n        <div className=\"card\">\n            <h1>{processData.processName}</h1>\n            <p>Started: {processData.processStart}</p>\n            <div className=\"card-body\">\n                {logs.length > 0 &&\n                    <div className=\"card-log\">\n                        {logs.map((e: string, index) => {\n                            return <p key={`log-${index}`}>{e}</p>\n                        })}\n                    </div>\n                }\n                {logsError.length > 0 &&\n                    <div className=\"card-log\">\n                        {logsError.map((e: string, index) => {\n                            return <p key={`log-${index}`}>{e}</p>\n                        })}\n                    </div>\n                }\n            </div>\n        </div>\n    )\n\n}","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios'\nimport { ProcessComponent } from './Process';\nfunction App() {\n    const [status, setStatus] = useState(false);\n    const [processes, setProcesses] = useState([])\n    useEffect(() => {\n        axios.get(\"http://localhost:7000/status\").then((res) => {\n            if (res.data.status) {\n                setStatus(res.data.status)\n                axios.get(\"http://localhost:7000/processes\").then((res) => {\n                    if (res.data.processes) {\n                        console.log(res.data.processes)\n                        setProcesses(res.data.processes)\n                    }\n                }).catch(e => {\n\n                })\n            }\n        })\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>Child Manager</h1>\n                <p>\n                    STATUS: {(status) ? <span className=\"online\">ONLINE</span> : <span className=\"offline\">OFFLINE</span>}\n                </p>\n            </header>\n            <div className=\"App-body\">{processes.map((process, index) => {\n                return <ProcessComponent key={index} process={process} />\n            })}</div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}